/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DAIInterestRateModelV3,
  DAIInterestRateModelV3Interface,
} from "../DAIInterestRateModelV3";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pot_",
        type: "address",
      },
      {
        internalType: "address",
        name: "jug_",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "baseRatePerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "jumpMultiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "kink",
        type: "uint256",
      },
    ],
    name: "NewInterestParams",
    type: "event",
  },
  {
    inputs: [],
    name: "assumedOneMinusReserveFactorMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blocksPerYear",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dsrPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gapPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "getBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveFactorMantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isInterestRateModel",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jumpMultiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kink",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gapPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
    ],
    name: "updateJumpRateModel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f4b38038062000f4b8339810160408190526200003491620004a5565b600080546001600160a01b0319166001600160a01b0383161781558086868483808484846200006684808585620000d1565b505050505050505050506308a0c09b668e1bc9bf04000062000089919062000519565b600555600680546001600160a01b038086166001600160a01b0319928316179092556007805492851692909116919091179055620000c662000186565b5050505050620005d2565b620000e16308a0c09b8562000519565b600255620000f4816308a0c09b6200053c565b62000108670de0b6b3a7640000856200053c565b62000114919062000519565b600155620001276308a0c09b8362000519565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600754604051636cb1c69b60e11b8152644554482d4160d81b60048201526000916001600160a01b03169063d9638d36906024016040805180830381865afa158015620001d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fd91906200055e565b5090506000600f633b9aca006b033b2e3c9fd0803ce8000000600760009054906101000a90046001600160a01b03166001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000290919062000583565b6200029c90866200059d565b620002a89190620005b8565b620002b4919062000519565b620002c091906200053c565b9050670d2f13f7789f0000670de0b6b3a7640000620002de620003cf565b620002ea91906200053c565b620002f6919062000519565b60028190558111156200034f57600454670de0b6b3a764000060055460025484620003229190620005b8565b6200032e91906200059d565b6200033a91906200053c565b62000346919062000519565b6001556200037a565b600454670de0b6b3a76400006005546200036a91906200053c565b62000376919062000519565b6001555b6002546001546003546004546040805194855260208501939093529183015260608201527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a15050565b6000600f633b9aca006b033b2e3c9fd0803ce8000000600660009054906101000a90046001600160a01b03166001600160a01b031663487bf0826040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000439573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200045f919062000583565b6200046b9190620005b8565b62000477919062000519565b6200048391906200053c565b905090565b80516001600160a01b0381168114620004a057600080fd5b919050565b600080600080600060a08688031215620004be57600080fd5b8551945060208601519350620004d76040870162000488565b9250620004e76060870162000488565b9150620004f76080870162000488565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000826200053757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161562000559576200055962000503565b500290565b600080604083850312156200057257600080fd5b505080516020909101519092909150565b6000602082840312156200059657600080fd5b5051919050565b60008219821115620005b357620005b362000503565b500190565b600082821015620005cd57620005cd62000503565b500390565b61096980620005e26000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063b9f9850a11610066578063b9f9850a146101d1578063f14039de146101da578063f52d21f3146101e3578063fd2da339146101ec57600080fd5b80638da5cb5b1461018057806396456c5c146101ab578063a385fb96146101b3578063b8168816146101be57600080fd5b80632191f92a116100d35780632191f92a1461013d5780636dac7cd5146101555780636e71e2d8146101645780638726bb891461017757600080fd5b806315f24053146100fa57806318178358146101205780632037f3e71461012a575b600080fd5b61010d610108366004610812565b6101f5565b6040519081526020015b60405180910390f35b61012861020c565b005b61012861013836600461083e565b610433565b610145600181565b6040519015158152602001610117565b61010d670d2f13f7789f000081565b61010d610172366004610812565b6104cc565b61010d60015481565b600054610193906001600160a01b031681565b6040516001600160a01b039091168152602001610117565b61010d61050c565b61010d6308a0c09b81565b61010d6101cc36600461083e565b6105bc565b61010d60035481565b61010d60025481565b61010d60055481565b61010d60045481565b600061020284848461062c565b90505b9392505050565b600754604051636cb1c69b60e11b8152644554482d4160d81b60048201526000916001600160a01b03169063d9638d36906024016040805180830381865afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102809190610870565b5090506000600f633b9aca006b033b2e3c9fd0803ce8000000600760009054906101000a90046001600160a01b03166001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103109190610894565b61031a90866108c3565b61032491906108db565b61032e91906108f2565b6103389190610914565b9050670d2f13f7789f0000670de0b6b3a764000061035461050c565b61035e9190610914565b61036891906108f2565b60028190558111156103b757600454670de0b6b3a76400006005546002548461039191906108db565b61039b91906108c3565b6103a59190610914565b6103af91906108f2565b6001556103de565b600454670de0b6b3a76400006005546103d09190610914565b6103da91906108f2565b6001555b6002546001546003546004546040805194855260208501939093529183015260608201527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a15050565b6000546001600160a01b031633146104a05760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60448201526531ba34b7b71760d11b606482015260840160405180910390fd5b6104ae6308a0c09b846108f2565b6005556104be60008084846106f7565b6104c661020c565b50505050565b6000826104db57506000610205565b816104e684866108c3565b6104f091906108db565b610502670de0b6b3a764000085610914565b61020291906108f2565b6000600f633b9aca006b033b2e3c9fd0803ce8000000600660009054906101000a90046001600160a01b03166001600160a01b031663487bf0826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190610894565b6105a391906108db565b6105ad91906108f2565b6105b79190610914565b905090565b6000806105cb868686866107a2565b90506000846105da87896108c3565b6105e491906108db565b9050806105f357509050610624565b6000816105fe61050c565b610608908a610914565b61061291906108f2565b905061061e83826108c3565b93505050505b949350505050565b60008061063a8585856104cc565b9050600454811161067b57600254670de0b6b3a76400006001548361065f9190610914565b61066991906108f2565b61067391906108c3565b915050610205565b6000600254670de0b6b3a76400006001546004546106999190610914565b6106a391906108f2565b6106ad91906108c3565b90506000600454836106bf91906108db565b905081670de0b6b3a7640000600354836106d99190610914565b6106e391906108f2565b6106ed91906108c3565b9350505050610205565b6107056308a0c09b856108f2565b600255610716816308a0c09b610914565b610728670de0b6b3a764000085610914565b61073291906108f2565b6001556107436308a0c09b836108f2565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b6000806107b783670de0b6b3a76400006108db565b905060006107c687878761062c565b90506000670de0b6b3a76400006107dd8484610914565b6107e791906108f2565b9050670de0b6b3a7640000816107fe8a8a8a6104cc565b6108089190610914565b61061e91906108f2565b60008060006060848603121561082757600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561085457600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561088357600080fd5b505080516020909101519092909150565b6000602082840312156108a657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156108d6576108d66108ad565b500190565b6000828210156108ed576108ed6108ad565b500390565b60008261090f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561092e5761092e6108ad565b50029056fea2646970667358221220eeb07d983ee02cfe078ea138127580766154d4ec8f020dbf20cda218746ef25564736f6c634300080a0033";

export class DAIInterestRateModelV3__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    pot_: string,
    jug_: string,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DAIInterestRateModelV3> {
    return super.deploy(
      jumpMultiplierPerYear,
      kink_,
      pot_,
      jug_,
      owner_,
      overrides || {}
    ) as Promise<DAIInterestRateModelV3>;
  }
  getDeployTransaction(
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    pot_: string,
    jug_: string,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      jumpMultiplierPerYear,
      kink_,
      pot_,
      jug_,
      owner_,
      overrides || {}
    );
  }
  attach(address: string): DAIInterestRateModelV3 {
    return super.attach(address) as DAIInterestRateModelV3;
  }
  connect(signer: Signer): DAIInterestRateModelV3__factory {
    return super.connect(signer) as DAIInterestRateModelV3__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAIInterestRateModelV3Interface {
    return new utils.Interface(_abi) as DAIInterestRateModelV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DAIInterestRateModelV3 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DAIInterestRateModelV3;
  }
}
